{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/analyze/analyze.component.ts","webpack:///src/app/analyze/analyze.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/bottom-sheet/bottom-sheet.component.ts","webpack:///src/app/bottom-sheet/bottom-sheet.component.html","webpack:///src/app/circuit/circuit.component.ts","webpack:///src/app/circuit/circuit.component.html","webpack:///src/app/code/code.component.ts","webpack:///src/app/code/code.component.html","webpack:///src/app/convert/convert.component.ts","webpack:///src/app/convert/convert.component.html","webpack:///src/app/export/export.component.ts","webpack:///src/app/export/export.component.html","webpack:///src/app/gate-edit/gate-edit.component.ts","webpack:///src/app/gate-edit/gate-edit.component.html","webpack:///src/app/graphical/graphical.component.html","webpack:///src/app/graphical/graphical.component.ts","webpack:///src/app/import/import.component.ts","webpack:///src/app/import/import.component.html","webpack:///src/app/input/input.component.ts","webpack:///src/app/input/input.component.html","webpack:///src/app/output/output.component.ts","webpack:///src/app/output/output.component.html","webpack:///src/app/services/Operation.ts","webpack:///src/app/services/Utility.ts","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/http.service.ts","webpack:///src/app/simulate/simulate.component.html","webpack:///src/app/simulate/simulate.component.ts","webpack:///src/app/stepper/stepper.component.ts","webpack:///src/app/stepper/stepper.component.html","webpack:///src/app/tab/tab.component.ts","webpack:///src/app/tab/tab.component.html","webpack:///src/app/unroll/unroll.component.html","webpack:///src/app/unroll/unroll.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AnalyzeComponent","http","data","snackbar","isExpert","formatOptions","depth","object","getCircuit","callBackend","counts","depthObject","JSON","parse","architecture","selectedFormatOption","unroll","formatUsed","includes","open","circuits","circuit","setCircuit","blob","Blob","type","saveAs","event","value","useQiskit","useRigetti","changed","download","visibility","opacity","width","selector","animations","templateUrl","styleUrls","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","title","monacoConfig","baseUrl","defaultOptions","scrollBeyondLastLine","AppModule","provide","useValue","duration","declarations","providers","bootstrap","BottomSheetComponent","_bottomSheetRef","fb","qubits","params","clbits","validatorsObject","i","length","required","form","group","number","isNaN","dismiss","preventDefault","item","valuesSelected","CircuitComponent","CodeComponent","decorations","editorOptions","theme","language","automaticLayout","scrollbar","useShadows","verticalHasArrows","horizontalHasArrows","vertical","horizontal","verticalScrollbarSize","horizontalScrollbarSize","arrowSize","editor","circuitRef","highlightLines","subscribe","lines","firstLine","lastLine","markLine","setCircuitOnWrite","startLine","endLine","deltaDecorations","range","monaco","Range","options","isWholeLine","linesDecorationsClassName","revealLine","onChange","onInit","ConvertComponent","child","computeInternal","ExportComponent","console","log","selectedOption","setExportCircuit","computeExport","encapsulation","None","GateEditComponent","gate","editOperation","lineNumbersInCircuit","GraphicalComponent","_elementRef","document","cdRef","_bottomSheet","importantGatesList","lineList","isGateSelected","dragged","circuitChanged","detectChanges","computeGateConnections","container","previousContainer","previousIndex","currentIndex","moveOperation","element","nativeElement","indices","split","qubitIndex","parseInt","index","removeOperationAtIndex","operation","toLowerCase","numberOfQubits","numberOfParameter","numberOfClbits","openBottomSheet","operationIndex","getLinesToInsert","addOperationIndex","newQubitIndex","newIndex","operationsAtBit","linesToRemove","getLinesToInsertEvent","clbitIndex","qubitNames","newClbitIndex","concat","generateList","bottomSheetRef","afterDismissed","lineNumbers","forEach","push","getLineNumbersIncreasedByOne","tooltip","parameter","circuitElement","getElementById","circuitLeft","getClientRects","x","circuitRight","operationsAtIndex","line","placeholder","control","qubit","rects","xLeft","xRight","yTop","y","yBot","height","setYTop","setYBot","setYLeft","setXRight","measure","element2","rects2","styles","getWidth","getHeight","oldSelectedGate","showGate","selectedGate","next","drop","ImportComponent","InputComponent","convert","compute","addEventListener","readFile","bind","click","file","target","files","extension","name","pop","reader","FileReader","onload","fileReadCompleted","result","readAsText","inputFormat","exportFormat","inputFile","OutputComponent","format","Operation","numberOfCtrlBits","list","OperationIndex","H","I","S","SX","SXDG","SDG","T","TDG","U","U1","U2","U3","X","Y","Z","CCX","C3X","C4X","DCX","CH","CPHASE","CRX","CRY","CRZ","CSWAP","CSX","CU","CU1","CU3","CX","CY","CZ","MS","PHASE","RCCX","RC3X","RX","RXX","RY","RYY","RZ","RZZ","RZX","SWAP","ISWAP","BARRIER","MEASURE","importantGatesMap","gateMap","key","ConnectorAttributes","Number","MAX_VALUE","delay","ms","setTimeout","insert","arr","newItem","slice","DataService","numQbits","numClbits","numBits","clbitNames","bitNames","maxIndexTotal","Array","fill","firstOperationAt","numberOfLines","parseCircuit","arrayOfLines","lineNumber","afterBracket","replace","numbers","trim","lineTrimmed","lineSplitted","operationString","parameters","paramsWithoutBits","maxIndex","clbit","lastIndex","operationIndexControl","numCtrlBits","fillPlaceholders","bit","removeOperation","splice","join","lineToInsert","generateStringFromArguments","editOperationLines","string","listToString","nextString","max","providedIn","url","apiUrl","headers","HttpService","dataJSON","stringify","post","responseType","toPromise","error","SimulateComponent","chartType","chartDatasets","chartLabels","chartColors","backgroundColor","borderColor","borderWidth","chartOptions","responsive","scales","yAxes","ticks","beginAtZero","xAxes","countObject","chartData","label","StepperComponent","_formBuilder","firstFormGroup","firstCtrl","selectedIndex","showInformation","analyzeComponent","analyse","onStepChange","TabComponent","simulateComponent","simulate","tabClick","UnrollComponent","selectedGates","chooseRigetti","chooseIBMQ","chooseNative","option","deselect","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { DataService } from '../services/data.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n} from '@angular/animations';\nimport { MatSelectChange } from '@angular/material/select';\n\n@Component({\n  selector: 'app-analyze',\n  animations: [\n    trigger('expert', [\n      state('open', style({\n        visibility: 'visible',\n        opacity: '1',\n        width: '*',\n      })),\n      state('closed', style({\n        visibility: 'hidden',\n        width: \"0px\",\n        opacity: '0',\n\n      })),\n      transition('open => closed', [\n        animate('0.5s')\n      ]),\n      transition('closed => open', [\n        animate('0.5s')\n      ]),\n    ]),\n  ],\n  templateUrl: './analyze.component.html',\n  styleUrls: ['./analyze.component.scss']\n})\nexport class AnalyzeComponent implements OnInit {\n  isExpert = false;\n  formatOptions: string[] = [\"OpenQASM\", \"Quil\", \"Qiskit\", \"Pyquil\"]\n  selectedFormatOption: string;\n\n\n  public depth = {\n    \"q_depth\": 0,\n    \"q_gate_times\": 0,\n    \"q_two_qubit\": 0,\n    \"r_depth\": 0,\n    \"r_gate_times\": 0,\n    \"r_two_qubit\": 0\n  };\n\n  architecture: string;\n  formatUsed: string;\n  \n  constructor(private http: HttpService, private data: DataService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  async analyse() {\n    let object = {\n      \"circuit\": this.data.getCircuit(\"internal\")\n    }\n    let counts: string = await this.http.callBackend(object, \"depth\")\n    let depthObject = JSON.parse(counts)\n    if (depthObject) {\n      this.depth = depthObject;\n    }\n  }\n\n  useQiskit() {\n    this.architecture = \"IBMQ\"\n    this.selectedFormatOption = \"OpenQASM\"\n    this.unroll()\n    if (!this.isExpert) {\n      this.formatUsed = \"qasm\"\n    }    \n  }\n\n  useRigetti() {\n    this.architecture = \"Rigetti\"\n    this.selectedFormatOption = \"Quil\"\n    this.unroll()\n    if (!this.isExpert) {\n      this.formatUsed = \"quil\"\n    }   \n  }\n\n  private async unroll() {  \n    if (this.isExpert) {\n      if (!(this.formatOptions.includes(this.selectedFormatOption))) {\n        this.snackbar.open(\"You must choose an output language/framework or disable expert mode.\");\n        return\n      }\n    }  \n\n    this.snackbar.open(\"Request sent to backend. Results will be available shortly.\");\n    let object = {\n      \"option\": this.architecture,\n      \"circuit\": this.data.circuits[\"internal\"],\n      \"isExpert\": this.isExpert,\n      \"format\": this.selectedFormatOption,\n    }\n\n    let circuit = await this.http.callBackend(object, \"unroll\")\n    if (circuit) {\n      this.data.setCircuit(\"export\", circuit)\n    }\n  }\n\n  download() {\n    if (this.data.circuits[2] === \"\") {\n      this.snackbar.open(\"Circuit is empty.\");\n      return;\n    }\n    if (!this.formatUsed) {\n      this.snackbar.open(\"No valid format specified.\");\n      return;\n    }\n    var blob = new Blob([this.data.circuits[\"export\"]], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"circuit.\" + this.formatUsed);\n  }\n\n  changed(event: MatSelectChange) {\n    this.selectedFormatOption = event.value;\n    this.formatUsed = this.selectedFormatOption;\n    if (this.architecture) {\n      this.unroll()\n    }    \n  } \n\n}\n","<div class=\"container\" class=\"tab-content\">\n    <mat-list class=\"pl-4 matList\">\n        <div mat-subheader>Qiskit</div>\n        <div class=\"row justify-content-center\">\n            <div class=\"col\" matTooltip=\"Length of the longest path of the unrolled circuit for IBM QX.\">Depth:</div>\n            <div class=\"col\">{{depth['q_depth']}}</div>\n            <div class=\"col\"\n                matTooltip=\"Counts the two qubits gates on the longest path of the unrolled circuit for IBM QX.\">\n                Two-Qubit Depth:</div>\n            <div class=\"col\">{{depth['q_two_qubit']}}</div>\n            <div class=\"col\" matTooltip=\"Counts the number of pulses of the unrolled circuit for IBM QX.\">X90 Pulses\n                Depth:</div>\n            <div class=\"col\">{{depth['q_gate_times']}}</div>\n            <div class=\"col\"><button mat-mini-fab color=\"primary\" class=\"col\" (click)=\"useQiskit()\">\n                    <mat-icon>keyboard_arrow_right</mat-icon>\n                </button></div>\n\n        </div>\n\n\n        <mat-divider class=\"mt-2 mb-2\"></mat-divider>\n        <div mat-subheader>Rigetti</div>\n        <div class=\"row\">\n            <div class=\"col\"\n                matTooltip=\"Length of the longest path of the unrolled circuit for Rigetti architectures..\">Depth:</div>\n            <div class=\"col\">{{depth['r_depth']}}</div>\n            <div class=\"col\"\n                matTooltip=\"Counts the two qubits gates on the longest path of the unrolled circuit for Rigetti architectures.\">\n                Two Qubit Depth:</div>\n            <div class=\"col\">{{depth['r_two_qubit']}}</div>\n            <div class=\"col\"\n                matTooltip=\"Counts the number of pulses of the unrolled circuit for Rigetti architectures.\">X90 Pulses\n                Depth:</div>\n            <div class=\"col\">{{depth['r_gate_times']}}</div>\n            <div class=\"col\"><button mat-mini-fab color=\"primary\" class=\"col\" (click)=\"useRigetti()\">\n                    <mat-icon>keyboard_arrow_right</mat-icon>\n                </button></div>\n        </div>\n    </mat-list>\n</div>\n\n<mat-divider class=\"mt-2 mb-2\"></mat-divider>\n<div class=\"row \">\n    <div class=\"col float-left pl-5\">\n        <mat-checkbox class=\"example-margin\" [(ngModel)]=\"isExpert\">Expert Mode</mat-checkbox>\n    </div>\n    <div class=\"col-4\" [@expert]=\"isExpert ? 'open' : 'closed'\">\n        <mat-form-field class=\"w-100\">\n            <mat-label> Choose Export Language/Framework</mat-label>\n            <mat-select (selectionChange)=\"changed($event)\">\n                <p class=\"pl-2 pt-2 selectionTitle\">Languages</p>\n                <mat-option value=\"OpenQASM\">\n                    OpenQASM\n                </mat-option>\n                <mat-option value=\"Quil\">\n                    Quil\n                </mat-option>\n                <mat-divider></mat-divider>\n                <p class=\"pl-2 pt-2 selectionTitle\">Frameworks</p>\n                <mat-option value=\"Qiskit\">\n                    Qiskit\n                </mat-option>\n                <mat-option\n                    matTooltip=\"Pyquil program can be exported in the backend. The export of Pyquil skeleton code is experimential.\"\n                    matTooltipClass=\"tooltip-large\" value=\"Pyquil\">\n                    Pyquil\n                </mat-option>\n\n            </mat-select>\n        </mat-form-field>\n    </div>\n\n    <div class=\"col float-right pr-5\">\n        <button (click)=\"download()\" mat-mini-fab class=\"float-right\" matTooltip=\"Download Circuit.\"\n            matTooltipClass=\"tooltip-large\" color=\"primary\">\n            <mat-icon>system_update</mat-icon>\n        </button>\n    </div>\n\n</div>\n<app-code class=\"pt-5 row\" circuitRef='export'></app-code>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ImportComponent } from './import/import.component';\nimport { CircuitComponent } from './circuit/circuit.component';\nimport { ExportComponent } from './export/export.component';\nimport { ConvertComponent } from './convert/convert.component';\nimport { StepperComponent } from './stepper/stepper.component';\nimport { UnrollComponent } from './unroll/unroll.component';\nimport { AnalyzeComponent } from './analyze/analyze.component';\n\n\nconst routes: Routes = [\n  { path: 'import', component: ImportComponent },\n  { path: 'circuit', component: CircuitComponent },\n  { path: 'export', component: ExportComponent },\n  { path: 'convert', component: ConvertComponent },\n  { path: 'stepper', component: StepperComponent },\n  { path: 'unroll', component: AnalyzeComponent },\n  // { path: 'unroll', component: UnrollComponent },\n  { path: '**', redirectTo: '/stepper' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n\n\n }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","<p>\n  <mat-toolbar color=\"primary\">\n    <span class=\"spacer\"></span>\n      <span>Quantum Circuit Transpiler</span>\n      \n      <span class=\"spacer-large\"></span>\n\n      <div>\n\n        <a mat-button [routerLink]=\"'/stepper'\"> <mat-icon>view_carousel</mat-icon>  Transpiling and Analyzing </a>\n        <a mat-button [routerLink]=\"'/convert'\"> <mat-icon>compare_arrows</mat-icon>  Circuit Conversion </a>\n        <!-- <a mat-button [routerLink]=\"'/import'\"> <mat-icon>input</mat-icon> Import </a>\n        <a mat-button [routerLink]=\"'/circuit'\"> <mat-icon>edit</mat-icon> Visualize and Edit </a>\n        <a mat-button [routerLink]=\"'/unroll'\"> <mat-icon>code</mat-icon> Unroll </a>\n        <a mat-button [routerLink]=\"'/export'\"> <mat-icon>arrow_forward</mat-icon> Export </a> -->\n  \n      </div>\n      <span class=\"spacer\"></span>\n  </mat-toolbar>\n</p>\n\n<router-outlet></router-outlet>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { InputComponent } from './input/input.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CodeComponent } from './code/code.component';\nimport { MonacoEditorModule, NgxMonacoEditorConfig } from 'ngx-monaco-editor';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ImportComponent } from './import/import.component';\nimport { ExportComponent } from './export/export.component';\nimport { CircuitComponent } from './circuit/circuit.component';\nimport { ConvertComponent } from './convert/convert.component';\nimport { GraphicalComponent } from './graphical/graphical.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport {MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS} from '@angular/material/snack-bar';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport { StepperComponent } from './stepper/stepper.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport { OutputComponent } from './output/output.component';\nimport { UnrollComponent } from './unroll/unroll.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\nimport {MatListModule} from '@angular/material/list';\nimport { TabComponent } from './tab/tab.component';\nimport { SimulateComponent } from './simulate/simulate.component';\nimport { AnalyzeComponent } from './analyze/analyze.component';\nimport { GateEditComponent } from './gate-edit/gate-edit.component';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport { BottomSheetComponent } from './bottom-sheet/bottom-sheet.component';\n\nconst monacoConfig: NgxMonacoEditorConfig = {\n  baseUrl: 'assets',\n  defaultOptions: { scrollBeyondLastLine: false }\n};\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InputComponent,\n    CodeComponent,\n    ImportComponent,\n    ExportComponent,\n    CircuitComponent,\n    ConvertComponent,\n    GraphicalComponent,\n    StepperComponent,\n    OutputComponent,\n    UnrollComponent,\n    TabComponent,\n    SimulateComponent,\n    AnalyzeComponent,\n    GateEditComponent,\n    BottomSheetComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatInputModule,\n    MatAutocompleteModule,\n    MatSelectModule,\n    MatDividerModule,\n    MatToolbarModule,\n    MatTabsModule,\n    MatIconModule,\n    MatTooltipModule,\n    FormsModule,\n    MonacoEditorModule.forRoot(),\n    HttpClientModule,\n    MatSnackBarModule,\n    MatStepperModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DragDropModule,\n    MatCheckboxModule,\n    MDBBootstrapModule.forRoot(),\n    MatListModule,\n    MatBottomSheetModule,\n    MatFormFieldModule,\n\n  ],\n  providers: [\n    {provide: MAT_SNACK_BAR_DEFAULT_OPTIONS, useValue: {duration: 2500}}\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-bottom-sheet',\n  templateUrl: './bottom-sheet.component.html',\n  styleUrls: ['./bottom-sheet.component.scss']\n})\nexport class BottomSheetComponent implements OnInit {\n  qubits: any[];\n  clbits: any[];\n  params: any[];\n  form: FormGroup;\n\n  constructor(private _bottomSheetRef: MatBottomSheetRef<BottomSheetComponent>, @Inject(MAT_BOTTOM_SHEET_DATA) public data: any, public fb: FormBuilder) {\n    this.qubits = data.qubits;\n    this.params = data.params;\n    this.clbits = data.clbits;\n\n    let validatorsObject = {}\n    for (let i = 0; i < this.qubits.length + this.params.length + this.clbits.length; i++) {\n      validatorsObject[\"\" + i] = ['', Validators.required]\n    }\n\n    this.form = fb.group(validatorsObject);\n  }\n  ngOnInit(): void {\n  }\n\n\n  isNumber(number) {\n    if (number === \"\") {\n      return false;\n    }\n    return !isNaN(number)\n  }\n\n  valuesSelected(event: MouseEvent) {\n    let data = {\n      qubits: this.qubits,\n      params: this.params,\n      clbits: this.clbits\n    }\n    this._bottomSheetRef.dismiss(data);\n    event.preventDefault();\n\n  }\n\n  trackByFn(item, id){\n    return item\n  }\n\n}\n","<form [formGroup]=\"form\">\n<mat-nav-list>\n    <div mat-list-item>\n        <span mat-line mat-subheader *ngIf=\"qubits.length > 0\">Qubits</span>\n        <div class=\"row\">\n            <mat-form-field class=\"col\" appearance=\"outline\" *ngFor=\"let qubit of qubits; index as index; trackBy: trackByFn\">\n                <input type=\"number\" matInput placeholder=\"Qubit {{index}}\" [(ngModel)]=\"qubits[index]\" formControlName=\"{{index}}\">\n                <!-- <mat-error *ngIf=\"signInForm.hasError('email', 'emailSignIn')\">\n                    Bitte geben Sie eine valide E-Mail Adresse ein.\n                  </mat-error> -->\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div mat-list-item>\n        <span mat-line mat-subheader *ngIf=\"clbits.length > 0\">Classical Bit</span>\n        <div class=\"row\">\n            <mat-form-field class=\"col\" appearance=\"outline\" *ngFor=\"let clbit of clbits; index as index; trackBy: trackByFn\">\n                <input type=\"number\" matInput placeholder=\"Classical Bit {{index}}\" [(ngModel)]=\"clbits[index]\" formControlName=\"{{index + qubits.length}}\">\n            </mat-form-field>\n        </div>\n    </div>\n\n    <div mat-list-item>\n        <span mat-line mat-subheader *ngIf=\"params.length > 0\">Parameter</span>\n        <div class=\"row\">\n            <mat-form-field class=\"col\" appearance=\"outline\" *ngFor=\"let parameter of params; index as index; trackBy: trackByFn\">\n                <input type=\"number\" matInput  placeholder=\"Parameter {{index}}\" [(ngModel)]=\"params[index]\" formControlName=\"{{index + qubits.length + clbits.length}}\">\n            </mat-form-field>\n        </div>\n    </div>\n    <button [disabled]=\"!form.valid\" mat-raised-button color=\"primary\" class=\"w-100\" (click)=\"valuesSelected($event)\">Values selected.</button>\n</mat-nav-list>\n</form>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-circuit',\n  templateUrl: './circuit.component.html',\n  styleUrls: ['./circuit.component.scss']\n})\nexport class CircuitComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- <div class=\"container\">\n    <mat-tab-group mat-stretch-tabs>\n      <mat-tab label=\"Code\">\n        <app-code></app-code>\n        \n      </mat-tab>\n      <mat-tab label=\"Graphical Circuit\"> </mat-tab>\n    </mat-tab-group>\n  </div> -->\n\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-3\">\n      <app-code circuitRef='internal'></app-code>\n    </div>\n    <div class=\"col-9\">\n      <app-tab></app-tab>\n    </div>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { MonacoEditorModule, NgxEditorModel } from 'ngx-monaco-editor';\n\n@Component({\n  selector: 'app-code',\n  templateUrl: './code.component.html',\n  styleUrls: ['./code.component.scss']\n})\nexport class CodeComponent implements OnInit {\n  @Input() circuitRef: string;\n  editor: any;\n  decorations: any[] = [];\n\n  editorOptions = {\n    theme: 'vs-light', language: 'python', automaticLayout: true, scrollbar: {\n        useShadows: false,\n        verticalHasArrows: true,\n        horizontalHasArrows: true,\n        vertical: 'hidden',\n        horizontal: 'hidden',\n\n        verticalScrollbarSize: 0,\n        horizontalScrollbarSize: 17,\n        arrowSize: 30\n    },\n};;\n \n\n  constructor(public data: DataService) { \n  }\n\n  ngOnInit(): void {\n\n  }\n\n  onInit(editor) {\n    this.editor = editor;\n    if (this.circuitRef === \"internal\") {\n      this.data.highlightLines.subscribe((lines: number[]) => {        \n        if (lines.length > 0) {        \n          let firstLine = lines[0]\n          let lastLine = lines[lines.length - 1]\n          this.markLine(firstLine, lastLine);\n        }\n      })\n    }\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  onChange(circuit: string) {\n    this.data.setCircuitOnWrite(this.circuitRef, circuit)\n  }\n  \n\n  markLine(startLine: number, endLine: number) {\n    this.decorations = this.editor.deltaDecorations(this.decorations, [\n      { range: new monaco.Range(startLine,1,endLine,1), options: { isWholeLine: true, linesDecorationsClassName: 'myLineDecoration' }},\n    ]);\n\n    this.editor.revealLine(startLine);\n  }\n  \n\n}\n","<div class=\"outerDiv\" style=\"height: auto; width: 100%\" class=\"pt-2\">\n    <ngx-monaco-editor style=\"height: 650px\" [options]=\"editorOptions\" [ngModel] = \"data.getCircuit(circuitRef)\" (ngModelChange)=\"onChange($event)\" (onInit)=\"onInit($event)\"></ngx-monaco-editor>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { InputComponent } from '../input/input.component';\n\n@Component({\n  selector: 'app-convert',\n  templateUrl: './convert.component.html',\n  styleUrls: ['./convert.component.scss']\n})\nexport class ConvertComponent implements OnInit {\n  @ViewChild(InputComponent) child:InputComponent;\n  selectedOption: string;\n  options: string[] = [\"OpenQASM\", \"Quil\", \"Qiskit\", \"Pyquil\"]\n\n  constructor(public data: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  async computeInternal() {\n    this.child.computeInternal()\n  }\n\n}\n","\n<div class=\"container pt-2\">\n    <div class=\"row pt-2\">\n        <div class=\"col\">\n            <mat-form-field class=\"w-100\">\n                <mat-label> Choose Input</mat-label>\n                <mat-select (selectionChange)=\"data.changedInput($event)\">\n                    <p class=\"pl-2 pt-2\">Languages</p>\n                    <mat-option value=\"OpenQASM\">\n                        OpenQASM\n                    </mat-option>\n                    <mat-option value=\"Quil\">\n                        Quil\n                    </mat-option>\n                    <mat-divider></mat-divider>\n                    <p class=\"pl-2 pt-2\">Frameworks</p>\n                    <mat-option\n                        matTooltip=\"Name of the circuit must be qc. All occurences can be changed with CTRL + F2.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Qiskit\">\n                        Qiskit\n                    </mat-option>\n                    <mat-option\n                        matTooltip=\"Name of the program must be p. All occurences can be changed with CTRL + F2.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Pyquil\">\n                        Pyquil\n                    </mat-option>\n\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"col text-center\">\n            <button (click)=\"computeInternal()\" mat-mini-fab matTooltip=\"Convert Circuit.\"\n                matTooltipClass=\"tooltip-large\" color=\"primary\">\n                <mat-icon>forward</mat-icon>\n            </button>\n        </div>\n        <div class=\"col\">\n            <mat-form-field class=\"w-100\">\n                <mat-label> Choose Output</mat-label>\n                <mat-select (selectionChange)=\"data.changedExport($event)\">\n                    <p class=\"pl-2 pt-2\">Languages</p>\n                    <mat-option value=\"OpenQASM\">\n                        OpenQASM\n                    </mat-option>\n                    <mat-option value=\"Quil\">\n                        Quil\n                    </mat-option>\n                    <mat-divider></mat-divider>\n                    <p class=\"pl-2 pt-2\">Frameworks</p>\n                    <mat-option\n                        matTooltipClass=\"tooltip-large\" value=\"Qiskit\">\n                        Qiskit\n                    </mat-option>\n                    <mat-option \n                        matTooltip=\"Pyquil program can be exported in the backend. The export of Pyquil skeleton code is experimential.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Pyquil\">\n                        Pyquil\n                    </mat-option>\n\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n</div>\n\n<div class=\"container-fluid pt-2\">\n    <div class=\"row\">\n        <div class=\"col content-left\">\n            <app-input compute=\"convert\"></app-input>\n        </div>\n        <div class=\"col\">\n            <div class=\"row\">\n                \n            </div>\n            <app-output></app-output>    \n        </div>\n    </div>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { MatSelectChange } from '@angular/material/select';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-export',\n  templateUrl: './export.component.html',\n  styleUrls: ['./export.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ExportComponent implements OnInit {  \n  options: string[] = [\"OpenQASM\", \"Quil\", \"Qiskit\", \"Pyquil\"]\n  selectedOption: string;\n\n  constructor(private http: HttpService, private snackbar: MatSnackBar, private data: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  changed(event: MatSelectChange) {\n    console.log(event)\n    this.selectedOption = event.value\n  }\n\n  async computeExport() {\n    if (!(this.options.includes(this.selectedOption))) {\n      this.snackbar.open(\"You must choose an output language/framework.\");\n      return\n    }\n\n    let object = {\n      \"option\": this.selectedOption,\n      \"circuit\": this.data.getCircuit(\"current\")\n    }\n    let circuit = await this.http.callBackend(object, \"export_circuit\")\n    if (circuit) {\n      this.data.setExportCircuit(circuit, this.selectedOption)\n    }    \n  }\n\n}\n","<div class=\"container pt-2\">\n    <div class=\"row pt-2\">\n        <div class=\"col\"></div>\n        <div class=\"col text-center\">\n            <button (click)=\"computeExport()\" mat-mini-fab matTooltip=\"Export Circuit in the chosen format.\"\n                matTooltipClass=\"tooltip-large\" color=\"primary\">\n                <mat-icon>forward</mat-icon>\n            </button>\n        </div>\n\n        <div class=\"col float-right\">\n            <mat-form-field class=\"w-100\">\n                <mat-label> Choose Export Language/Framework</mat-label>\n                <mat-select (selectionChange)=\"changed($event)\">\n                    <p class=\"pl-2 pt-2 selectionTitle\">Languages</p>\n                    <mat-option value=\"OpenQASM\">\n                        OpenQASM\n                    </mat-option>\n                    <mat-option value=\"Quil\">\n                        Quil\n                    </mat-option>\n                    <mat-divider></mat-divider>\n                    <p class=\"pl-2 pt-2 selectionTitle\">Frameworks</p>\n                    <mat-option value=\"Qiskit\">\n                        Qiskit\n                    </mat-option>\n                    <mat-option \n                    matTooltip=\"Pyquil program can be exported in the backend. The export of Pyquil skeleton code is experimential.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Pyquil\">\n                        Pyquil\n                    </mat-option>\n\n                </mat-select>\n            </mat-form-field>\n        </div>\n    </div>\n\n</div>\n\n<div class=\"container-fluid pt-2\">\n    <div class=\"row\">\n        <div class=\"col content-left\">\n            <app-code circuitRef='current'></app-code>\n\n        </div>\n        <div class=\"col\">\n            <app-output></app-output>\n        </div>\n    </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { OperationIndex } from '../services/Operation';\nimport { DataService } from '../services/data.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-gate-edit',\n  templateUrl: './gate-edit.component.html',\n  styleUrls: ['./gate-edit.component.scss']\n})\nexport class GateEditComponent implements OnInit {\n  @Input() gate: OperationIndex;\n  constructor(private data: DataService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  change() {\n    console.log(this.gate)\n    this.data.editOperation(this.gate, this.gate.lineNumbersInCircuit)\n  }\n  \n}\n","<h4>{{gate.operation.name}} Gate</h4>\n<div class=\"pl-4 row matList\">\n    <div class=\"col-3\">\n        <div mat-subheader>Control Qubits</div>\n        <div class=\"col\" *ngFor=\"let qubit of gate.qubits; index as index\">\n            <input matInput type=\"number\" *ngIf=\"(index < gate.operation.numberOfCtrlBits)\" [(ngModel)]=\"gate.qubits[index]\" (ngModelChange)=\"change()\">\n        </div>\n\n    </div>\n    <div class=\"col-3\">\n        <div mat-subheader>Target Qubits</div>\n        <div class=\"col\" *ngFor=\"let qubit of gate.qubits; index as index\">\n            <input matInput type=\"number\" *ngIf=\"(index >= gate.operation.numberOfCtrlBits)\" [(ngModel)]=\"gate.qubits[index]\" (ngModelChange)=\"change()\">\n        </div>\n    </div>\n    <div class=\"col-3\">\n    <div mat-subheader>Classical Bits</div>\n        <div class=\"col\" *ngFor=\"let clbit of gate.clbits; index as index\">\n            <input matInput type=\"number\" [(ngModel)]=\"gate.clbits[index]\" (ngModelChange)=\"change()\">\n        </div>\n    </div>\n    <div class=\"col-3\">\n        <div mat-subheader>Parameter</div>\n        <div class=\"col\" *ngFor=\"let parameter of gate.parameter; index as index\">\n            <input matInput type=\"number\" [(ngModel)]=\"gate.parameter[index]\" (ngModelChange)=\"change()\">\n        </div>\n    </div>\n</div>","<div cdkDropListGroup cdkDropListOrientation=\"horizontal\" class=\"tab-content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div>\n                <h4>Possible Gates</h4>\n                <div cdkDropListSortingDisabled id=\"gateList\" cdkDropList #gateList=\"cdkDropList\"\n                    [cdkDropListData]=\"importantGatesList\" cdkDropListOrientation=\"horizontal\"\n                    (cdkDropListDropped)=\"drop($event)\">\n                    <div class=\"deleteBox text-center\" *ngIf=\"dragged\">\n                        <p class=\"deleteText\">Put the item here to remove it from the quantum circuit.</p>\n                    </div>\n                    <div class=\"row align-items-center\" *ngIf=\"!dragged\">\n                        <div class=\"col-1 mb-2\" *ngFor=\"let item of importantGatesList\">\n                            <div class=\"gate\" id=\"{{item.name}}\" cdkDrag>\n                                {{item.name}}\n                            </div>\n                        </div>\n                    </div>\n                    \n                </div>\n\n                \n            </div>\n\n            <mat-divider class=\"w-100 mb-3 mt-3\"></mat-divider>\n         \n            <div id=\"circuit\" class=\"circuit\">\n                <div *ngFor=\"let line of lineList\" class=\"connector\" [ngStyle]=\"setStyle(line)\"></div>\n                <div *ngFor=\"let qubit of data.qubitNames; index as qubitIndex\">                    \n                    <div class=\"row\" *ngIf=\"data.operationsAtBit[qubitIndex].length > 0\">\n                        <div class=\"custom-container\">\n                            <div class=\"qubitName\">\n                                |{{qubit}}>\n                            </div>\n                            <div [id]=\"qubit\" cdkDropList cdkDropListOrientation=\"horizontal\"  #gateList=\"cdkDropList\"\n                                [cdkDropListData]=\"data.operationsAtBit[qubitIndex]\" class=\"list\"\n                                (cdkDropListDropped)=\"drop($event)\">\n                                <div class=\"placeholder\"\n                                    *ngFor=\"let operationIndex of data.operationsAtBit[qubitIndex]; index as index\">\n                                    <div id=\"{{qubitIndex}}-{{index}}\" class=\"box\" cdkDrag (cdkDragStarted)=\"dragStarted()\" (cdkDragEnded)=\"dragEnded()\"\n                                        (mouseenter)=\"onMouseEnter(operationIndex)\" (mouseleave)=\"onMouseLeave()\"\n                                        *ngIf=\"(!operationIndex.placeholder && !operationIndex.control)\"\n                                        matTooltip=\"{{getTooltip(operationIndex)}}\">\n                                        <mat-icon class=\"editBox\" color=\"primary\" (click)=\"edit(operationIndex)\">edit\n                                        </mat-icon>\n                                        {{operationIndex.operation.name}}\n                                    </div>\n                                    <div class=\"box emptyBox\" cdkDrag *ngIf=\"operationIndex.placeholder\">\n                                    </div>\n                                    <div id=\"{{qubitIndex}}-{{index}}\" class=\"box\" *ngIf=\"operationIndex.control\" (cdkDragStarted)=\"dragStarted()\" (cdkDragEnded)=\"dragEnded()\"\n                                        cdkDrag (mouseenter)=\"onMouseEnter(operationIndex)\"\n                                        (mouseleave)=\"onMouseLeave()\" matTooltip=\"{{getTooltip(operationIndex)}}\">\n                                        <mat-icon class=\"editBox\" color=\"primary\" (click)=\"edit(operationIndex)\">edit\n                                        </mat-icon>\n                                        <div class=\"controlBox\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <mat-divider class=\"w-100 mb-3 mt-3\" *ngIf=\"data.clbitNames.length > 0\"></mat-divider>\n\n                <div *ngFor=\"let clbit of data.clbitNames; index as clbitIndex\">\n                    <div class=\"row\">\n                        <div class=\"custom-container\">\n                            <div class=\"qubitName\">\n                                {{clbit}}\n                            </div>\n                            <div id=\"{{clbitIndex + data.qubitNames.length}}\" cdkDropList\n                                cdkDropListOrientation=\"horizontal\" #clbitList=\"cdkDropList\"\n                                [cdkDropListData]=\"data.operationsAtBit[clbitIndex + data.qubitNames.length]\"\n                                class=\"list\" (cdkDropListDropped)=\"drop($event)\">\n                                <div class=\"placeholder\"\n                                    *ngFor=\"let operationIndex of data.operationsAtBit[clbitIndex + data.qubitNames.length]; index as index\">\n                                    <!-- usual operation -->\n                                    <div id=\"{{clbitIndex + data.qubitNames.length}}-{{index}}\" class=\"box\" cdkDrag (cdkDragStarted)=\"dragStarted()\" (cdkDragEnded)=\"dragEnded()\"\n                                        (mouseenter)=\"onMouseEnter(operationIndex)\" (mouseleave)=\"onMouseLeave()\"\n                                        *ngIf=\"(!operationIndex.placeholder && !operationIndex.control)\"\n                                        matTooltip=\"{{getTooltip(operationIndex)}}\">\n                                        <mat-icon class=\"editBox\" color=\"primary\" (click)=\"edit(operationIndex)\">edit\n                                        </mat-icon>\n                                        {{operationIndex.operation.name}}\n                                    </div>\n                                    <!-- empty operation -->\n                                    <div class=\"box emptyBox\" cdkDrag *ngIf=\"operationIndex.placeholder && (!operationIndex.placeholder && !operationIndex.control)\" >\n                                    </div>     \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"isGateSelected\">\n                <mat-divider class=\"w-100 mb-3 mt-3\"></mat-divider>\n                <app-gate-edit [gate]=\"selectedGate\"></app-gate-edit>\n            </div>\n\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, Inject, AfterViewInit, ChangeDetectorRef, HostListener } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Operation, importantGatesList, OperationIndex, gateMap } from '../services/Operation';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { HttpService } from '../services/http.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTabChangeEvent } from '@angular/material/tabs';\nimport { DOCUMENT } from '@angular/common';\nimport { ConnectorAttributes, delay } from '../services/Utility'\nimport { BehaviorSubject } from 'rxjs';\nimport { MatBottomSheetRef, MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { BottomSheetComponent } from '../bottom-sheet/bottom-sheet.component';\n\n@Component({\n  selector: 'app-graphical',\n  templateUrl: './graphical.component.html',\n  styleUrls: ['./graphical.component.scss']\n})\nexport class GraphicalComponent implements OnInit, AfterViewInit {\n  public importantGatesList: Operation[] = importantGatesList;;\n  public lineList: ConnectorAttributes[] = [];\n  public isGateSelected: boolean = false;\n  public selectedGate: OperationIndex;\n  public oldSelectedGate: OperationIndex;\n  public dragged: boolean = false;\n\n  constructor(public data: DataService, private http: HttpService, private _elementRef: ElementRef, private snackbar: MatSnackBar, @Inject(DOCUMENT) document, private cdRef: ChangeDetectorRef, private _bottomSheet: MatBottomSheet) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit() {\n    this.data.circuitChanged.subscribe(value => {\n      this.cdRef.detectChanges();\n      if (value) {\n        this.computeGateConnections()\n      }\n    })\n  }\n\n  drop(event: CdkDragDrop<OperationIndex[]>) {\n    console.log(event.container.id)\n    // change position of gate    \n    if (event.previousContainer === event.container) {\n      if ((event.container.id === \"gateList\") || event.previousIndex == event.currentIndex) {\n        return;\n      }\n      this.moveOperation(event)\n      // remove gate\n    } else if (event.container.id === \"gateList\") {\n      let id: string = event.item.element.nativeElement.id;\n      let indices = id.split(\"-\");\n      let qubitIndex = parseInt(indices[0])\n      let index = parseInt(indices[1])\n      this.data.removeOperationAtIndex(index, qubitIndex)\n      // add new gate\n    } else if (event.previousContainer.id === \"gateList\") {\n      let qubitIndex: number = parseInt(event.container.id);\n      let index: number = event.currentIndex;\n      let operation: Operation = gateMap[event.item.element.nativeElement.id.toLowerCase()]\n      if (operation.numberOfQubits > 1 || operation.numberOfParameter > 0 || operation.numberOfClbits > 0) {\n        this.openBottomSheet(operation, qubitIndex, index)\n      } else {\n        let operationIndex: OperationIndex = new OperationIndex(index, operation, [], [qubitIndex], [], [this.data.getLinesToInsert(index, qubitIndex)])\n        this.data.addOperationIndex(operationIndex)\n      }\n      // change qubitIndex and possibly index of gate\n    } else {\n      this.moveOperation(event)\n    }\n  }\n\n  moveOperation(event: CdkDragDrop<OperationIndex[]>) {\n    let newQubitIndex: number = parseInt(event.container.id);\n    let newIndex: number = event.currentIndex;\n    let id: string = event.item.element.nativeElement.id;\n    let indices = id.split(\"-\");\n    let qubitIndex = parseInt(indices[0])\n    let index = parseInt(indices[1])\n    let operationIndex: OperationIndex = this.data.operationsAtBit[qubitIndex][index];\n\n    let linesToRemove: number[] = null;\n    // change index\n    if (index != newIndex) {\n      linesToRemove = operationIndex.lineNumbersInCircuit\n      operationIndex.lineNumbersInCircuit = [this.data.getLinesToInsertEvent(index, newIndex, newQubitIndex)];\n    }\n    // change qubit \n    for (let i = 0; i < operationIndex.qubits.length; i++) {\n      if (operationIndex.qubits[i] == qubitIndex) {\n        operationIndex.qubits[i] = newQubitIndex\n      }\n    }\n    // change clbit\n    // subtract number of qubits to the get clbit references\n    let clbitIndex = qubitIndex - this.data.qubitNames.length\n    let newClbitIndex = newQubitIndex - this.data.qubitNames.length\n    for (let i = 0; i < operationIndex.clbits.length; i++) {\n      if ((operationIndex.clbits[i]) == clbitIndex) {\n        operationIndex.clbits[i] = newClbitIndex\n      }\n    }\n    this.data.editOperation(operationIndex, linesToRemove);\n  }\n\n  openBottomSheet(operation: Operation, qubitIndex: number, index: number): void {\n    let qubits = [qubitIndex].concat(operation.generateList(operation.numberOfQubits - 1))\n    let params = operation.generateList(operation.numberOfParameter)\n    let clbits = operation.generateList(operation.numberOfClbits)\n    const bottomSheetRef = this._bottomSheet.open(BottomSheetComponent, {\n      data: { qubits: qubits, params: params, clbits: clbits },\n    });\n\n    bottomSheetRef.afterDismissed().subscribe((data) => {\n      if (data) {\n        let qubits = data.qubits;\n        let params = data.params;\n        let clbits = data.clbits;\n        let operationIndex: OperationIndex = new OperationIndex(index, operation, params, qubits, clbits, [this.data.getLinesToInsert(index, qubits[0])]);\n        this.data.addOperationIndex(operationIndex)\n      }\n    });\n\n  }\n\n  private getLineNumbersIncreasedByOne(operationIndex: OperationIndex) {\n    let lineNumbers = []\n    operationIndex.lineNumbersInCircuit.forEach(element => {\n      lineNumbers.push(element + 1)\n    })\n    return lineNumbers;\n  }\n\n  public getTooltip(operationIndex: OperationIndex) {\n    let lineNumbers = this.getLineNumbersIncreasedByOne(operationIndex);\n    let tooltip = `Lines in code: ${this.getLineNumbersIncreasedByOne(operationIndex)}`;\n    if (operationIndex.parameter.length > 0) {\n      tooltip += `\\nParameter: ${operationIndex.parameter}`\n    }\n    return tooltip;\n  }\n\n  @HostListener('window:resize', ['$event'])\n  @HostListener('window:scroll', ['$event'])\n  recomputeGateConnections(event) {\n    this.computeGateConnections()\n  }\n\n  private async computeGateConnections() {\n    // hacky solution: without delay the new elements with their new coordinates might not be in the view\n    await delay(10)\n\n    let lineList: ConnectorAttributes[] = [];\n    let circuitElement = document.getElementById(`circuit`)\n    if (circuitElement == null) {\n      return;\n    }\n    let circuitLeft = circuitElement.getClientRects()[0].x\n    let circuitRight = circuitElement.getClientRects()[0].x + circuitElement.getClientRects()[0].width;\n\n    this.data.operationsAtBit.forEach((operationsAtIndex, qubitIndex) => {\n      for (let index = 0; index < operationsAtIndex.length; index++) {\n        let operation: OperationIndex = operationsAtIndex[index]\n        let line = new ConnectorAttributes()\n        // operationsAtIndex.forEach((operation: OperationIndex, index) => {\n        if (!operation.placeholder && !operation.control) {\n          if (operation.operation.numberOfQubits > 1) {            \n            operation.qubits.forEach(qubit => {\n              let element = document.getElementById(`${qubit}-${index}`)\n              if (element == null) {\n                return;\n              }\n              let rects = element.getClientRects()[0]\n              if (rects == null) {\n                return;\n              }\n              let xLeft = rects.x;\n              let xRight = rects.x + rects.width;\n              let yTop = rects.y\n              let yBot = rects.y + rects.height\n              line.setYTop(yTop)\n              line.setYBot(yBot)\n              line.setYLeft(xLeft)\n              line.setXRight(xRight)\n            })\n            \n          } else if (operation.operation.numberOfClbits > 0) {  \n            line.measure = true;         \n            let element = document.getElementById(`${operation.qubits[0]}-${index}`)\n            let element2 = document.getElementById(`${operation.clbits[0] + this.data.qubitNames.length}-${index}`)\n            if (element == null || element2 == null) {\n              continue;\n            }\n            let rects = element.getClientRects()[0]\n            let rects2 = element2.getClientRects()[0]\n            if (rects == null || rects2 == null) {\n              continue;\n            }\n            line.setYTop(rects.y)\n            line.setYBot(rects2.y + rects2.height)\n            line.setYLeft(rects.x)\n            line.setXRight(rects.x + rects.width)\n          }\n          if (line.xLeft < circuitLeft) {\n            continue;\n          }\n          if (line.xRight > circuitRight) {\n            continue;\n          }\n          lineList.push(line)\n        }\n\n      }\n    })\n    this.lineList = lineList;\n    this.cdRef.detectChanges();\n  }\n\n  public setStyle(line: ConnectorAttributes) {\n    let styles = {\n      'top': line.yTop + \"px\",\n      'left': line.xLeft + \"px\",\n      \"width\": line.getWidth() + \"px\",\n      \"height\": line.getHeight() + \"px\",\n    };\n\n    if (line.measure) {\n      styles['background-image'] = \"linear-gradient(to bottom right, #4b830d, #aee571)\"\n      styles['opacity'] = \"15%\"\n    } else {\n      styles['background-image'] = \"linear-gradient(to bottom right, #005cb2, #6ab7ff)\"\n      styles['opacity'] = \"25%\"\n    }\n\n    return styles;\n  }\n\n  edit(operationIndex: OperationIndex) {\n    this.oldSelectedGate = operationIndex;\n    this.showGate(operationIndex)\n  }\n\n  onMouseEnter(operationIndex: OperationIndex) {\n    //recompute gate connections because of new elements on site that can change the layout\n    this.computeGateConnections()\n    this.highlightLines(operationIndex)\n    if (!this.oldSelectedGate) {\n      this.showGate(operationIndex);\n    }\n  }\n\n  showGate(operationIndex: OperationIndex) {\n    this.highlightLines(operationIndex)\n    this.selectedGate = operationIndex;\n    this.isGateSelected = true;\n  }\n\n  private highlightLines(operationIndex: OperationIndex) {\n    this.data.highlightLines.next(this.getLineNumbersIncreasedByOne(operationIndex))\n  }\n\n  onMouseLeave() {\n    if (this.oldSelectedGate) {\n      this.showGate(this.oldSelectedGate);\n    }\n  }\n\n  dragStarted() {\n    this.dragged = true;\n  }\n\n  dragEnded() {\n    this.dragged = false;\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { InputComponent } from '../input/input.component';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-import',\n  templateUrl: './import.component.html',\n  styleUrls: ['./import.component.scss'],\n})\nexport class ImportComponent implements OnInit {\n  @ViewChild(InputComponent) child: InputComponent;\n  constructor(public data: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  async computeInternal() {\n    this.child.computeInternal()\n  }\n\n}\n","<div class=\"container pt-2\">\n    <div class=\"row pt-2\">\n        <div class=\"col\">\n            <mat-form-field class=\"w-100\">\n                <mat-label> Choose Input</mat-label>\n                <mat-select (selectionChange)=\"this.data.changedInput($event)\">\n                    <p class=\"pl-2 pt-2 selectionTitle\">Languages</p>\n                    <mat-option value=\"OpenQASM\">\n                        OpenQASM\n                    </mat-option>\n                    <mat-option value=\"Quil\">\n                        Quil\n                    </mat-option>\n                    <mat-divider></mat-divider>\n                    <p class=\"pl-2 pt-2 selectionTitle\">Frameworks</p>\n                    <mat-option\n                        matTooltip=\"Name of the circuit must be qc. All occurences can be changed with CTRL + F2.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Qiskit\">\n                        Qiskit\n                    </mat-option>\n                    <mat-option\n                        matTooltip=\"Name of the program must be p. All occurences can be changed with CTRL + F2.\"\n                        matTooltipClass=\"tooltip-large\" value=\"Pyquil\">\n                        Pyquil\n                    </mat-option>\n\n                </mat-select>\n            </mat-form-field>\n        </div>\n        <div class=\"col text-center\">\n            <button (click)=\"computeInternal()\" mat-mini-fab matTooltip=\"Import Circuit.\"\n                matTooltipClass=\"tooltip-large\" color=\"primary\">\n                <mat-icon>forward</mat-icon>\n            </button>\n        </div>\n        <div class=\"col\"></div>\n    </div>\n</div>\n\n<div class=\"container-fluid pt-2\">\n    <div class=\"row\">        \n        <div class=\"col content-left\">\n            <app-input compute=\"circuit_to_internal\"></app-input>\n        </div>\n\n        <div class=\"col\">\n            <app-code circuitRef='internal'></app-code>\n        </div>\n    </div>\n</div>\n<mat-divider [vertical]=\"true\"></mat-divider>","import { Component, OnInit, ViewEncapsulation, ViewChild, Input } from '@angular/core';\nimport { MatSelectChange } from '@angular/material/select';\nimport { HttpService } from '../services/http.service';\nimport { DataService } from '../services/data.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class InputComponent implements OnInit {\n  @Input() compute: string;\n  convert: boolean = false;\n  \n  constructor(private http: HttpService, private data: DataService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n    if (this.compute === \"convert\") {\n      this.convert = true;\n    } else {\n      this.convert = false;\n    }\n  }\n\n  inputFile() {\n    document.getElementById('fileInput').addEventListener('change', this.readFile.bind(this), false);\n    document.getElementById('fileInput').click()\n  }\n\n  readFile(event: any) {\n    let file = event.target.files[0]; // FileList object\n    console.log(file)\n\n    let extension = file.name.split('.').pop()\n    console.log(extension)\n\n    const reader = new FileReader();\n    reader.onload = function fileReadCompleted() {\n      // when the reader is done, the content is in reader.result.\n      this.data.setCircuit(\"import\", reader.result);\n    }.bind(this);\n\n    reader.readAsText(file);\n  }\n\n  async computeInternal() {\n    if (!(this.data.options.includes(this.data.inputFormat))) {\n      this.snackbar.open(\"You must choose an input language/framework.\");\n      return\n    }\n\n    let object = {\n      \"option\": this.data.inputFormat,\n      \"circuit\": this.data.circuits[\"import\"]\n    }\n    if (this.convert) {\n      if (this.data.exportFormat === \"\") {\n        this.snackbar.open(\"You must choose an output language/framework.\");\n      return\n\n      }\n      object[\"optionOutput\"] = this.data.exportFormat;\n    }\n    let circuit = await this.http.callBackend(object, this.compute)\n    if (circuit) {\n      let index: string;\n      if (this.convert) {\n        index = \"export\";\n      } else {\n        index = \"internal\";\n      }\n      this.data.setCircuit(index, circuit)      \n    }    \n  }\n}\n","<div class=\"container\">\n    <div class=\"row float-left pr-2\">\n        <input id=\"fileInput\" type=\"file\" />\n        <button (click)=\"inputFile()\" mat-mini-fab class=\"\" matTooltip=\"Import File.\" matTooltipClass=\"tooltip-large\"\n            color=\"primary\">\n            <mat-icon>publish</mat-icon>\n        </button>\n    </div>\n    <div class=\"row exportCode pr-4\">\n        <app-code circuitRef='import'></app-code>\n    </div>\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Observable } from 'rxjs';\nimport { saveAs } from \"file-saver\";\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-output',\n  templateUrl: './output.component.html',\n  styleUrls: ['./output.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class OutputComponent implements OnInit {  \n  constructor(public data: DataService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  download() {\n    if (this.data.circuits[2] === \"\") {\n      this.snackbar.open(\"Circuit is empty.\");\n      return;\n    }\n    let format = \"\";\n    if (this.data.exportFormat == \"Quil\") {\n      format = \"quil\"\n    } else if (this.data.exportFormat == \"OpenQASM\") {\n      format = \"qasm\"\n    } else if (this.data.exportFormat == \"Pyquil\") {\n      format = \"py\"\n    } else if (this.data.exportFormat == \"Qiskit\") {\n      format = \"py\"\n    } else {\n      this.snackbar.open(\"No valid format selected.\");\n      return;\n    }\n    var blob = new Blob([this.data.circuits[\"export\"]], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"circuit.\" + format);\n  }\n}\n","\n<div class=\"row float-right pr-2\">\n    <button (click)=\"download()\" mat-mini-fab class=\"float-right\"\n            matTooltip=\"Download Circuit.\" matTooltipClass=\"tooltip-large\"\n            color=\"primary\">\n            <mat-icon>system_update</mat-icon>\n        </button>\n</div>\n<div class=\"row exportCode pr-4\">\n    <app-code class=\"pt-2\" circuitRef='export'></app-code>\n    \n</div>","export class Operation {\n    name: string;\n    numberOfParameter: number;\n    numberOfQubits: number;\n    numberOfClbits: number;\n    numberOfCtrlBits: number;\n\n    constructor(name, numberOfQubits = 1, numberOfParameter = 0, numberOfClbits = 0, numberOfCtrlBits = 0) {\n        this.name = name;\n        this.numberOfParameter = numberOfParameter;\n        this.numberOfQubits = numberOfQubits;\n        this.numberOfClbits = numberOfClbits;\n        this.numberOfCtrlBits = numberOfCtrlBits;\n    }\n\n    generateList(number: number): any[] {\n        let list = []\n        for (let i = 0; i < number; i++) {\n            list.push(null)\n        }\n        return list\n    }\n}\n\n\nexport class OperationIndex {\n    placeholder: boolean;\n    control: boolean;\n    index: number;\n    operation: Operation;\n    parameter: number[];\n    qubits: number[];\n    clbits: number[];\n    lineNumbersInCircuit: number[];    \n\n    constructor(index, operation, parameter, qubits, clbits, lineNumbersInCircuit, placeholder = false, control = false) {\n        this.index = index;\n        this.operation = operation;\n        this.parameter = parameter;\n        this.qubits = qubits;\n        this.clbits = clbits;\n        this.lineNumbersInCircuit = lineNumbersInCircuit;\n        this.placeholder = placeholder;\n        this.control = control;    \n    }\n}\n\n// gates\nconst H = new Operation(\"H\")\nconst I = new Operation(\"I\")\nconst S = new Operation(\"S\")\nconst SX = new Operation(\"SX\")\nconst SXDG = new Operation(\"SXDG\")\nconst SDG = new Operation(\"SDG\")\nconst T = new Operation(\"T\")\nconst TDG = new Operation(\"TDG\")\nconst U = new Operation(\"U\", 1, 3)\nconst U1 = new Operation(\"U1\", 1, 1)\nconst U2 = new Operation(\"U2\", 1, 2)\nconst U3 = new Operation(\"U3\", 1, 3)\nconst X = new Operation(\"X\")\nconst Y = new Operation(\"Y\")\nconst Z = new Operation(\"Z\")\n\nconst CCX = new Operation(\"CCX\", 3, 0, 0, 2)\nconst C3X = new Operation(\"C3X\", 4, 0, 0, 3)\nconst C4X = new Operation(\"C4X\", 5, 0, 0, 2)\nconst DCX = new Operation(\"DCX\", 2, 0, 0, 0)\nconst CH = new Operation(\"CH\", 2, 0, 0, 1)\nconst CPHASE = new Operation(\"CPHASE\", 2, 1, 0, 1)\nconst CRX = new Operation(\"CRX\", 2, 1, 0, 1)\nconst CRY = new Operation(\"CRY\", 2, 1, 0, 1)\nconst CRZ = new Operation(\"CRZ\", 2, 1, 0, 1)\nconst CSWAP = new Operation(\"CSWAP\", 3, 0, 0, 1)\nconst CSX = new Operation(\"CSX\", 2, 0, 0, 1)\nconst CU = new Operation(\"CU\", 2, 4, 0, 1)\nconst CU1 = new Operation(\"CU1\", 2, 1, 0, 1)\nconst CU3 = new Operation(\"CU3\", 2, 3, 0, 1)\nconst CX = new Operation(\"CX\", 2, 0, 0, 1)\nconst CY = new Operation(\"CY\", 2, 0, 0, 1)\nconst CZ = new Operation(\"CZ\", 2, 0, 0, 1)\nconst MS = new Operation(\"MS\", 2, 0, 0, 0)\nconst PHASE = new Operation(\"PHASE\", 1, 1, 0, 0)\nconst RCCX = new Operation(\"RCCX\", 3, 0, 0, 2)\nconst RC3X = new Operation(\"RC3X\", 4, 0, 0, 3)\nconst RX = new Operation(\"RCCX\", 1, 1, 0, 0)\nconst RXX = new Operation(\"RXX\", 2, 1, 0, 0)\nconst RY = new Operation(\"RY\", 1, 1, 0, 0)\nconst RYY = new Operation(\"RYY\", 2, 1, 0, 0)\nconst RZ = new Operation(\"RZ\", 1, 1, 0, 0)\nconst RZZ = new Operation(\"RZZ\", 2, 1, 0, 0)\nconst RZX = new Operation(\"RZZ\", 2, 1, 0, 0)\nconst SWAP = new Operation(\"SWAP\", 2, 0, 0, 0)\nconst ISWAP = new Operation(\"ISWAP\", 2, 0, 0, 0)\n\n\n// other instructions\nconst BARRIER = new Operation(\"Barrier\", -1)\nconst MEASURE = new Operation(\"Measure\", 1, 0, 1)\n\nlet importantGatesMap = {\n    \"h\": H,\n    \"x\": X,\n    \"y\": Y,\n    \"z\": Z,\n    \"i\": I,\n    \"s\": S,    \n    \"t\": T,      \n    \"u1\": U1,\n    \"u2\": U2,\n    \"u3\": U3,\n    \"swap\": SWAP,\n    \"rx\": RXX,\n    \"rz\": RZ,\n    \"ry\": RY,\n    \"phase\": PHASE,\n    \"cu1\": CU1,\n    \"cu3\": CU3,\n    \"cx\": CX,\n    \"cy\": CY,\n    \"cz\": CZ,\n    \"crx\": CRX,\n    \"cry\": CRY,\n    \"crz\": CRZ,\n    \"cphase\": CPHASE,    \n    \"barrier\": BARRIER,\n    \"measure\": MEASURE\n}\n\nexport let gateMap = {\n    \"u\": U,\n    \"sx\": SX,\n    \"sxdg\": SXDG,\n    \"sdg\": SDG,\n    \"tdg\": TDG,  \n    \"ccx\": CCX,\n    \"c3x\": C3X,\n    \"c4x\": C4X,\n    \"dcx\": DCX,\n    \"ch\": CH,\n    \"cswap\": CSWAP,\n    \"csx\": CSX,\n    \"cu\": CU,   \n    \"ms\": MS,\n    \"rccx\": RCCX,\n    \"rc3x\": RC3X,    \n    \"rxx\": RXX,    \n    \"ryy\": RYY,    \n    \"rzz\": RZZ,\n    \"rzx\": RZX,\n    \"iswap\": ISWAP,\n}\n\nfor (let key in importantGatesMap) {\n    gateMap[key] = importantGatesMap[key];\n} \n\nexport let importantGatesList = [];\nfor (let key in importantGatesMap) {\n    importantGatesList.push(importantGatesMap[key]);\n}\n\n","export class ConnectorAttributes {\n    yBot: number = 0;\n    yTop: number = Number.MAX_VALUE;\n    xLeft: number = 0;\n    xRight: number = 0;\n    measure: boolean = false;\n\n    constructor(measure: boolean = false){\n        this.measure = measure;\n    }\n\n    setYTop(yTop: number) {\n        if (yTop < this.yTop) {\n            this.yTop = yTop\n        }\n    }\n\n    setYBot(yBot: number) {\n        if (yBot > this.yBot) {\n            this.yBot = yBot\n        }\n    }\n\n    setXRight(xRight: number) {\n        this.xRight = xRight;\n    }\n\n    setYLeft(xLeft: number) {\n        this.xLeft = xLeft;\n    }\n\n    getWidth() {\n        return this.xRight - this.xLeft;\n    }\n\n    getHeight() {\n        return this.yBot - this.yTop;\n    }\n}\n\nexport function delay(ms: number) {\n    return new Promise( resolve => setTimeout(resolve, ms) );\n}\n\nexport function insert(arr, index, newItem) { \n    return [\n    // part of the array before the specified index\n    ...arr.slice(0, index),\n    // inserted item\n    newItem,\n    // part of the array after the specified index\n    ...arr.slice(index)\n  ]\n}","import { Injectable } from '@angular/core';\nimport { Operation, gateMap, OperationIndex } from './Operation';\nimport { MatSelectChange } from '@angular/material/select';\nimport { element } from 'protractor';\nimport { HttpService } from './http.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { insert } from './Utility';\nimport { partitionArray } from '@angular/compiler/src/util';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  public circuitChanged: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  public highlightLines: BehaviorSubject<number[]> = new BehaviorSubject([]);\n\n  public options: string[] = [\"OpenQASM\", \"Quil\", \"Qiskit\", \"Pyquil\"];\n  public inputFormat: string = \"\";\n  public exportFormat: string = \"\";\n\n  public circuits: { [id: string]: string; } = {\n    \"import\":\n      `DECLARE ro BIT[3]\nH 0\nH 1\nH 2\nH 1\nCNOT 2 3\nCPHASE (0) 1 0\nCNOT 2 4\nH 0\nCPHASE (0) 1 2\nCPHASE (0) 0 2\nH 2\nMEASURE 0 ro[0]\nMEASURE 1 ro[1]\nMEASURE 2 ro[2]\n`,\n    \"internal\": \"\",\n    \"unroll\": \"\",\n    \"export\": \"\"\n  };\n\n\n  public numQbits: number = 0;\n  public numClbits: number = 0;\n  public numBits: number = 0;\n  public qubitNames: string[] = [];\n  public clbitNames: string[] = [];\n  public bitNames: string[] = [];\n  public maxIndexTotal: number = 0;\n  public currentIndex = Array(this.numBits).fill(-1);\n\n  public operationsAtBit: OperationIndex[][] = [];\n  public firstOperationAt: number = 0;\n  public numberOfLines: number = 0;\n\n  constructor() {\n    this.parseCircuit()\n  }\n\n\n  public setCircuit(index: string, circuit: string) {\n    this.circuits[index] = circuit;\n    if (index == \"internal\") {\n      this.parseCircuit()\n    }\n  }\n\n  public setCircuitOnWrite(circuitRef: string, circuit: string) {\n    try {\n      this.setCircuit(circuitRef, circuit);\n    } catch (e) {\n      // happens when a user is changing the circuit (and data is just partly changed), but should not happen otherwise\n      console.log(\"Circuit data cannot be parsed.\")\n      // console.log(e)\n    }\n\n  }\n\n\n  parseCircuit() {\n    // temp variables\n    let numQbits = 0;\n    let numClbits = 0;\n    let numBits = 0;\n    let maxIndexTotal = 0;\n    let qubitNames = [];\n    let clbitNames = [];\n    let bitNames = [];\n    let currentIndex = Array(this.numBits).fill(-1);\n    let operationsAtBit = [];\n    let firstOperationAt = -1;\n    let circuit = this.circuits[\"internal\"]\n    let arrayOfLines = circuit.split(\"\\n\");\n    let numberOfLines = arrayOfLines.length\n    arrayOfLines.forEach((line, lineNumber) => {\n      if (line.includes(\"QuantumCircuit\")) {\n        let afterBracket = line.split(\"(\")[1].replace(\")\", \"\");\n        let numbers = afterBracket.split(\",\")\n        numQbits = parseInt(numbers[0].trim())\n        if (numbers.length > 1) {\n          numClbits = parseInt(numbers[1].trim())\n        }\n        // TODO handle imports via registers\n        for (let i = 0; i < numQbits; i++) {\n          qubitNames.push(i)\n        }\n\n        for (let i = 0; i < numClbits; i++) {\n          clbitNames.push(i)\n        }\n        bitNames = qubitNames.concat(clbitNames)\n        numBits = numQbits + numClbits;\n\n        for (let i = 0; i < numBits; i++) {\n          operationsAtBit.push([]);\n        }\n\n      } else if (line.includes(\"qc.\")) {\n        if (firstOperationAt == -1) {\n          firstOperationAt = lineNumber;\n        }\n        let lineTrimmed = line.replace(/qc./g, \"\").trim();\n        let lineSplitted = lineTrimmed.split(\"(\");\n        let operationString = lineSplitted[0];\n        let parameters = lineSplitted[1].replace(\")\", \"\").split(\",\");\n        let operation: Operation = gateMap[operationString];\n\n        let paramsWithoutBits = []\n        let qubits = []\n        let clbits = []\n        for (let i = 0; i < operation.numberOfParameter; i++) {\n          paramsWithoutBits.push(parameters[i].trim())\n        }\n        for (let i = operation.numberOfParameter; i < (operation.numberOfParameter + operation.numberOfQubits); i++) {\n          qubits.push(parseInt(parameters[i].trim()))\n        }\n        for (let i = operation.numberOfParameter + operation.numberOfQubits; i < (operation.numberOfParameter + operation.numberOfQubits + operation.numberOfClbits); i++) {\n          clbits.push(parseInt(parameters[i].trim()))\n        }\n\n        // compute max index\n        let maxIndex = 0;\n        qubits.forEach(qubit => {\n          if (currentIndex[qubit] > maxIndex) {\n            maxIndex = currentIndex[qubit]\n          }\n        })\n        clbits.forEach(clbit => {\n          if (currentIndex[clbit + qubitNames.length] > maxIndex) {\n            maxIndex = currentIndex[clbit + qubitNames.length]\n          }\n        })\n        let lastIndex = maxIndex;\n        maxIndex += 1;\n        if (maxIndex > maxIndexTotal) {\n          maxIndexTotal = maxIndex;\n        }\n        \n        let lineNumbers = [lineNumber]\n        let operationIndex = new OperationIndex(maxIndex, operation, paramsWithoutBits, qubits, clbits, lineNumbers)\n        let operationIndexControl = new OperationIndex(maxIndex, operation, paramsWithoutBits, qubits, clbits, lineNumbers, false, true)\n        let placeholder = new OperationIndex(maxIndex, operation, paramsWithoutBits, qubits, clbits, lineNumbers, true)\n        // fill operations at index\n        let numCtrlBits = operation.numberOfCtrlBits;\n\n        if (operation.name == \"Barrier\") {\n          for (let i = 0; i < bitNames.length; i++) {\n            this.fillPlaceholders(maxIndexTotal - 1, i, operationsAtBit, placeholder)\n            operationsAtBit[i][maxIndexTotal] = operationIndex;\n            currentIndex[maxIndexTotal + 1]\n          }\n          maxIndexTotal++;\n          return;\n        }\n\n        // set max index in arrays\n        qubits.forEach(qubit => {\n          currentIndex[qubit] = maxIndex\n        })\n        clbits.forEach(clbit => {\n          currentIndex[clbit + qubitNames.length] = maxIndex\n        })\n\n        qubits.forEach((qubit, index) => {\n          this.fillPlaceholders(lastIndex, qubit, operationsAtBit, placeholder)\n          // control qubit\n          if (numCtrlBits > index) {\n            operationsAtBit[qubit][lastIndex] = operationIndexControl;\n            // target qubit\n          } else {\n            operationsAtBit[qubit][lastIndex] = operationIndex;\n          }\n        })\n\n        clbits.forEach((clbit, index) => {\n          clbit = clbit + qubitNames.length\n          this.fillPlaceholders(lastIndex, clbit, operationsAtBit, placeholder)\n          operationsAtBit[clbit][lastIndex] = operationIndex;\n        })\n\n\n      }\n    })\n    // at the end if parsing errors occur, the data is not written partly\n    this.numQbits = numQbits;\n    this.numClbits = numClbits;\n    this.numBits = numBits;\n    this.maxIndexTotal = maxIndexTotal;\n    this.qubitNames = qubitNames;\n    this.clbitNames = clbitNames;\n    this.bitNames = bitNames;\n    this.currentIndex = currentIndex;\n    this.operationsAtBit = operationsAtBit;\n    this.firstOperationAt = firstOperationAt;\n    this.numberOfLines = numberOfLines;\n\n    // fire event to notify components\n    this.circuitChanged.next(true);\n  }\n\n  private fillPlaceholders(lastIndex: number, bit: number, operationsAtBit: any[], placeholder: OperationIndex) {\n    if (lastIndex > operationsAtBit[bit].length - 1) {\n      for (let i = operationsAtBit[bit].length; i <= lastIndex; i++) {\n        operationsAtBit[bit].push(placeholder)\n      }\n    }\n  }\n\n\n  removeOperationAtIndex(index: number, qubitIndex: number) {\n    let operationIndex = this.operationsAtBit[qubitIndex][index];\n    this.removeOperation(operationIndex);\n  }\n\n  removeOperation(operationIndex: OperationIndex) {\n    let lineNumbers = operationIndex.lineNumbersInCircuit;\n    let lines = this.circuits[\"internal\"].split('\\n');\n    lineNumbers.forEach(lineNumber => {\n      lines.splice(lineNumber, 1);\n    })\n    this.circuits[\"internal\"] = lines.join('\\n');\n    this.parseCircuit()\n\n  }\n\n  addOperationIndex(operationIndex: OperationIndex) {\n    let lines = this.circuits[\"internal\"].split('\\n');\n    let lineToInsert: number = operationIndex.lineNumbersInCircuit[0];\n    lines.splice(lineToInsert, 0, `qc.${operationIndex.operation.name.toLowerCase()}(${this.generateStringFromArguments(operationIndex)})`);\n    this.circuits[\"internal\"] = lines.join('\\n');\n    this.parseCircuit()\n  }\n\n  public getLinesToInsert(index: number, qubitIndex: number): number {\n    let lineToInsert: number = this.firstOperationAt;\n    if (index < this.operationsAtBit[qubitIndex].length) {\n      let lineNumbersInCircuit = this.operationsAtBit[qubitIndex][index].lineNumbersInCircuit\n      lineToInsert = lineNumbersInCircuit[0]\n\n    } else {\n      lineToInsert = this.numberOfLines\n    }\n    return lineToInsert\n  }\n\n  public getLinesToInsertEvent(previousIndex: number, index: number, qubitIndex: number): number {\n    let lineToInsert: number = this.firstOperationAt;\n    if (index < this.operationsAtBit[qubitIndex].length) {\n      let lineNumbersInCircuit = this.operationsAtBit[qubitIndex][index].lineNumbersInCircuit\n      lineToInsert = lineNumbersInCircuit[0];\n      // needed, because element should be placed after the existing element\n      if (previousIndex < index) {\n        lineToInsert = lineNumbersInCircuit[lineNumbersInCircuit.length - 1] + 1\n      }\n    } else {\n      lineToInsert = this.numberOfLines\n    }\n    return lineToInsert\n  }\n\n  public editOperation(operationIndex: OperationIndex, linesToRemove: number[]) {\n    let lines = this.circuits[\"internal\"].split('\\n');\n    lines = this.editOperationLines(lines, operationIndex, linesToRemove)\n    this.circuits[\"internal\"] = lines.join('\\n');\n    this.parseCircuit()\n  }\n\n  private editOperationLines(lines: string[], operationIndex: OperationIndex, linesToRemove: number[]): string[] {\n    let lineToInsert: number = operationIndex.lineNumbersInCircuit[0];\n\n    // remove old lines\n    if (linesToRemove) {\n      linesToRemove.forEach(lineNumber => {\n        lines.splice(lineNumber, 1);\n      })\n      if (linesToRemove[0] < lineToInsert) {\n        lineToInsert -= linesToRemove.length\n      }\n      // add line\n      lines.splice(lineToInsert, 0, `qc.${operationIndex.operation.name.toLowerCase()}(${this.generateStringFromArguments(operationIndex)})`);\n      // otherwise just edit the old line\n    } else {\n      lines[lineToInsert] = `qc.${operationIndex.operation.name.toLowerCase()}(${this.generateStringFromArguments(operationIndex)})`;\n    }\n    return lines;\n  }\n\n\n  private generateStringFromArguments(operationIndex: OperationIndex): string {\n    // barrier is applied to all qubits\n    if (operationIndex.operation.name == \"Barrier\") {\n      return \"\";\n    }\n\n    let string = \"\";\n    string += this.listToString(operationIndex.parameter)\n    let nextString = this.listToString(operationIndex.qubits)\n    if (string != \"\" && nextString != \"\") {\n      string += \", \"\n    }\n    string += nextString;\n\n    nextString = this.listToString(operationIndex.clbits)\n    if (string != \"\" && nextString != \"\") {\n      string += \", \"\n    }\n    string += nextString;\n\n    return string;\n  }\n\n  private listToString(list: any[]): string {\n    let string: string = \"\";\n    for (let i = 0; i < list.length; i++) {\n      if (i < list.length - 1) {\n        string += list[i] + \", \"\n      } else {\n        string += list[i]\n      }\n    }\n    return string;\n  }\n\n\n  setMaxIndex() {\n    let max = -1;\n    this.currentIndex.forEach(index => {\n      if (index > max) {\n        max = index;\n      }\n    })\n    this.maxIndexTotal = max;\n  }\n\n  setExportCircuit(circuit: string, format: string) {\n    this.setCircuit(\"export\", circuit);\n    this.exportFormat = format;\n  }\n\n  getCircuit(circuitRef: string) {\n    if (circuitRef == \"current\") {\n      if (this.circuits[\"unroll\"] != \"\") {\n        return this.circuits[\"unroll\"];\n      }\n      return this.circuits[\"internal\"];\n    }\n    return this.circuits[circuitRef]\n\n  }\n\n  public changedInput(event: MatSelectChange) {\n    this.inputFormat = event.value;\n  }\n\n  public changedExport(event: MatSelectChange) {\n    this.exportFormat = event.value;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { environment } from './../../environments/environment';\n\nconst url = environment.apiUrl\n\n// const httpOptions = {\n//   headers: new HttpHeaders({\n//     'Content-Type':  'application/json',\n//   }),\n//   responseType: 'text' as 'text'\n// };\nconst headers = new HttpHeaders({\n  'Content-Type': 'application/json',\n})\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  constructor(private http: HttpClient, private snackbar: MatSnackBar) { }\n\n  async callBackend(data: {}, path: string) {\n    let dataJSON = JSON.stringify(data)\n    try {\n      let circuit = await this.http.post(url + path, dataJSON, { headers, responseType: 'text' }).toPromise()\n      this.snackbar.open(\"Successfully processed the data.\");\n      return circuit\n    } catch (err) {\n      console.log(err)\n      console.log(\"Backend error:\" +  err.error)\n      this.snackbar.open(\"Error at handling the data. The log shows detailed information about this error.\");\n    }\n\n  }\n}\n","<div class=\"container-fluid\" class=\"tab-content\">\n    <div class=\"chart\" *ngIf=\"counts.length != 0\">\n        <mat-divider class=\"mt-3\"></mat-divider>\n        <div class=\"row pt-3\">\n            <div style=\"display: block\">\n                <canvas mdbChart [chartType]=\"chartType\" [datasets]=\"chartDatasets\" [labels]=\"chartLabels\"\n                    [colors]=\"chartColors\" [options]=\"chartOptions\" [legend]=\"true\"\n                    (chartHover)=\"chartHovered($event)\" (chartClick)=\"chartClicked($event)\">\n                </canvas>\n            </div>\n        </div>\n        <button mat-raised-button class=\"mt-1 w-100 pt-1 pb-1\" (click)=\"simulate()\"><mat-icon>redo</mat-icon>Recompute</button>\n    </div>\n    \n\n</div>\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-simulate',\n  templateUrl: './simulate.component.html',\n  styleUrls: ['./simulate.component.scss']\n})\nexport class SimulateComponent implements OnInit {\n  public counts = [];\n\n  // chart attributes\n  public chartType: string = 'bar';\n  public chartDatasets: Array<any> = [];\n\n  public chartLabels: Array<any> = [];\n  public chartColors: Array<any> = [\n    {\n      backgroundColor: [\n        'rgba(255, 99, 132, 0.2)',\n        'rgba(54, 162, 235, 0.2)',\n        'rgba(255, 206, 86, 0.2)',\n        'rgba(75, 192, 192, 0.2)',\n        'rgba(153, 102, 255, 0.2)',\n        'rgba(255, 159, 64, 0.2)'\n      ],\n      borderColor: [\n        'rgba(255,99,132,1)',\n        'rgba(54, 162, 235, 1)',\n        'rgba(255, 206, 86, 1)',\n        'rgba(75, 192, 192, 1)',\n        'rgba(153, 102, 255, 1)',\n        'rgba(255, 159, 64, 1)'\n      ],\n      borderWidth: 2,\n    }\n  ];\n  public chartOptions: any = {\n    responsive: true,\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }],\n      xAxes: [{\n        ticks: {\n          beginAtZero: true\n        }\n      }]\n    }\n  };\n  public chartClicked(e: any): void { }\n  public chartHovered(e: any): void { }\n\n  constructor(private http: HttpService, private data: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  async simulate() {\n    let object = {\n      \"circuit\": this.data.getCircuit(\"internal\")\n    }\n    let counts: string = await this.http.callBackend(object, \"simulate\")\n    let countObject = JSON.parse(counts)\n    // countObject = this.appendCounts(countObject)\n    if (countObject) {\n      this.counts.push(countObject);\n      let chartData = [];\n      let chartLabels = [];\n      for (let key in countObject) {\n        let value = countObject[key];\n\n        if (!(key in this.chartLabels)) {\n          chartLabels.push(key);\n        }\n        chartData.push(value)\n\n      }\n      this.chartDatasets = [{\n        data: chartData,\n        label: \"Counts\"\n      }];\n      this.chartLabels = chartLabels;\n\n      // this.bottomDiv.nativeElement.scrollIntoView({ block: 'end',  behavior: 'smooth' });\n    }\n  }  \n\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AnalyzeComponent } from '../analyze/analyze.component';\n\n@Component({\n  selector: 'app-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss'],\n})\nexport class StepperComponent implements OnInit {\n  @ViewChild('analyze', {static: false}) analyzeComponent: AnalyzeComponent;\n\n  firstFormGroup: FormGroup;\n\n  constructor(private snackbar: MatSnackBar, private _formBuilder: FormBuilder) {\n    \n  }\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    \n  }\n\n  onStepChange(event: any) {\n    let index = event.selectedIndex;\n    if (index == 2) {\n      this.showInformation()\n      this.analyzeComponent.analyse();\n    }\n  }\n\n  showInformation() {\n    this.snackbar.open(\"Request sent to backend. Results will be available shortly.\");\n  } \n}\n","<div class=\"container-fluid\">\n  <mat-horizontal-stepper  #stepper (selectionChange)=\"onStepChange($event)\">\n    <mat-step [stepControl]=\"firstFormGroup\" state=\"input\">\n      <ng-template matStepLabel>Import</ng-template>\n      <app-import></app-import>\n    </mat-step>\n    <mat-step [stepControl]=\"firstFormGroup\" state=\"circuit\">\n      <ng-template matStepLabel>Visualize and Edit </ng-template>\n      <app-circuit></app-circuit>\n    </mat-step>\n    <mat-step [stepControl]=\"firstFormGroup\" state=\"circuit\">\n      <ng-template matStepLabel>Transpile and Export</ng-template>\n      <app-analyze #analyze></app-analyze>\n    </mat-step>\n  </mat-horizontal-stepper>\n</div>\n\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTabChangeEvent } from '@angular/material/tabs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { SimulateComponent } from '../simulate/simulate.component';\nimport { AnalyzeComponent } from '../analyze/analyze.component';\nimport { DataService } from '../services/data.service';\n\n@Component({\n  selector: 'app-tab',\n  templateUrl: './tab.component.html',\n  styleUrls: ['./tab.component.scss']\n})\nexport class TabComponent implements OnInit {\n  @ViewChild(\"simulate\", {static: false}) simulateComponent: SimulateComponent;\n  @ViewChild('analyze', {static: false}) analyzeComponent: AnalyzeComponent;\n\n\n  constructor(private snackbar: MatSnackBar, private data: DataService) { }\n\n  ngOnInit(): void {\n  }\n\n  tabClick(event: MatTabChangeEvent) {\n    let index = event.index;\n    if (index == 1) {\n      this.showInformation();\n      this.simulateComponent.simulate();\n    } else if (index == 2) {\n      this.showInformation();\n      this.analyzeComponent.analyse();\n    }\n  }\n\n  showInformation() {\n    this.snackbar.open(\"Request sent to backend. Results will be available shortly.\");\n  } \n  \n\n}\n","<mat-tab-group mat-align-tabs=\"center\" mat-stretch-tabs (selectedTabChange)=\"tabClick($event)\">\n    <mat-tab label=\"Graphical Representation\">\n        <ng-template mat-tab-label class=\"pb-3\">\n            <mat-icon class=\"tab-icon\">view_list</mat-icon>\n            Graphical Representation\n        </ng-template>\n        <app-graphical class=\"tab-content\"></app-graphical>\n    </mat-tab>\n\n    <mat-tab label=\"Simulate\">\n        <ng-template mat-tab-label>\n            <mat-icon class=\"tab-icon\" >memory</mat-icon>\n            Simulate\n        </ng-template>\n        <app-simulate #simulate class=\"tab-content\"></app-simulate>\n    </mat-tab>\n    <!-- <mat-tab label=\"Circuit Depth Analysis\">\n        <ng-template mat-tab-label>\n            <mat-icon class=\"tab-icon\">analytics</mat-icon>\n            Circuit Depth Analysis\n        </ng-template>\n        <app-analyze #analyze class=\"tab-content\"></app-analyze>\n    </mat-tab> -->\n</mat-tab-group>","<div class=\"container pt-2\">\n    <div class=\"row text-center d-flex justify-content-center\">\n        <div class=\"col-4 d-flex justify-content-center text-center\">\n            <mat-checkbox [(ngModel)]=\"chooseRigetti\" (click)=\"deselect()\">Unroll to native Rigetti gates.</mat-checkbox>\n        </div>\n        <div class=\"col-4 d-flex justify-content-center text-center\">\n            <mat-checkbox [(ngModel)]=\"chooseIBMQ\" (click)=\"deselect()\">Unroll to native IBMQ Experience gates.</mat-checkbox>\n        </div>\n        <div class=\"col-4 d-flex justify-content-center text-center\">\n            <div class=\"row\">\n                <div class=\"col\">\n                    <mat-checkbox [(ngModel)]=\"chooseNative\" (click)=\"deselect()\">Choose native gates.</mat-checkbox>\n                </div>\n                <div class=\"col\" *ngIf=\"chooseNative\">\n                    <mat-form-field appearance=\"fill\" class=\"multipleSelect\">\n                        <mat-label>Gates</mat-label>\n                        <mat-select multiple>\n                            <mat-option *ngFor=\"let item of gateMap | keyvalue\" [value]=\"item.key\" (value)=\"selectedGates\">{{item.key}}</mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            \n            \n        </div>\n    </div>\n    <div class=\"row text-center d-flex justify-content-center pt-2\">\n        <button (click)=\"unroll()\" mat-mini-fab class=\"float-right\" matTooltip=\"Unroll Circuit.\"\n                matTooltipClass=\"tooltip-large\" color=\"primary\">\n                <mat-icon>forward</mat-icon>\n            </button>\n    </div>\n</div>\n\n<div class=\"container-fluid pt-4\">\n    <div class=\"row\">\n        <div class=\"col content-left\">\n            <app-code circuitRef='internal'></app-code>\n        </div>\n\n        <div class=\"col\">\n            <app-code circuitRef='unroll'></app-code>\n        </div>\n    </div>\n</div>\n<mat-divider [vertical]=\"true\"></mat-divider>","import { Component, OnInit } from '@angular/core';\nimport { gateMap } from '../services/Operation';\nimport { ViewEncapsulation } from '@angular/core';\nimport { HttpService } from '../services/http.service';\nimport { DataService } from '../services/data.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-unroll',\n  templateUrl: './unroll.component.html',\n  styleUrls: ['./unroll.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class UnrollComponent implements OnInit {\n  selectedGates = [];\n  gateMap = gateMap;\n  chooseRigetti = false;\n  chooseIBMQ = false;\n  chooseNative = false;\n\n  constructor(private http: HttpService, private data: DataService, private snackbar: MatSnackBar) { }\n\n  ngOnInit(): void {\n  }\n\n  deselect() {\n    this.chooseIBMQ = false;\n    this.chooseRigetti = false;\n    this.chooseNative = false;\n\n  }\n\n  async unroll() {\n    if (!(this.chooseIBMQ || this.chooseNative || this.chooseRigetti)) {\n      this.snackbar.open(\"You must choose to which gates the circuit should be unrolled to.\");\n      return\n    }\n    let option = \"\"\n    if (this.chooseIBMQ) {\n      option = \"IBMQ\"\n    } else if (this.chooseNative) {\n      option = \"Custom\"\n    } else if (this.chooseRigetti) {\n      option = \"Rigetti\"\n    }\n\n    let object = {\n      \"option\": option,\n      \"circuit\": this.data.circuits[\"internal\"],\n      \"nativeGates\": this.selectedGates\n    }\n\n    let circuit = await this.http.callBackend(object, \"unroll\")\n    if (circuit) {\n      this.data.setCircuit(\"unroll\", circuit)\n    }\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: \"http://localhost:5000/\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}